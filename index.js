require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const schedule = require('node-schedule');
const db = require('./database');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.initDatabase();

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É'],
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ],
        resize_keyboard: true
    }
};

const waterAmountKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: '300 –º–ª', callback_data: 'water_0.3' },
                { text: '500 –º–ª', callback_data: 'water_0.5' }
            ],
            [
                { text: '1 –ª', callback_data: 'water_1' },
                { text: '–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'water_custom' }
            ]
        ]
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
const goalKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: '1.5 –ª', callback_data: 'goal_1.5' },
                { text: '2.0 –ª', callback_data: 'goal_2.0' },
                { text: '2.5 –ª', callback_data: 'goal_2.5' }
            ],
            [
                { text: '3.0 –ª', callback_data: 'goal_3.0' },
                { text: '–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'goal_custom' }
            ]
        ]
    }
};

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–µ–º
function createTimeKeyboard() {
    const keyboard = [];
    let row = [];
    
    for(let i = 0; i < 24; i++) {
        const hour = i.toString().padStart(2, '0');
        row.push({
            text: `${hour}:00`,
            callback_data: `time_${hour}:00`
        });
        
        if(row.length === 4 || i === 23) {
            keyboard.push([...row]);
            row = [];
        }
    }
    
    return {
        reply_markup: {
            inline_keyboard: keyboard
        }
    };
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
const statsKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: '–ó–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'stats_today' },
                { text: '–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'stats_week' }
            ],
            [
                { text: '–ó–∞ –º–µ—Å—è—Ü', callback_data: 'stats_month' },
                { text: '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è', callback_data: 'stats_all' }
            ]
        ]
    }
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const userTemp = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await db.getUser(chatId);

    if (!user) {
        await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤–æ–¥—ã. –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.');
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ –≤ –¥–µ–Ω—å:', goalKeyboard);
    } else {
        try {
            await bot.sendChatAction(chatId, 'typing');
            await bot.sendMessage(chatId, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', mainKeyboard);
        } catch (error) {
            if (error.code === 'ETELEGRAM' && (error.response.body.error_code === 403 || error.response.body.error_code === 400)) {
                await db.deleteUser(chatId);
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω)`);
            }
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset
bot.onText(/\/reset/, async (msg) => {
    const chatId = msg.chat.id;
    const confirmKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data: 'reset_confirm' },
                    { text: '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'reset_cancel' }
                ]
            ]
        }
    };
    await bot.sendMessage(chatId, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?', confirmKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
bot.onText(/üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)?', waterAmountKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('goal_')) {
        const goal = data.split('_')[1];
        if (goal === 'custom') {
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–ª—å –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):');
            bot.once('message', async (msg) => {
                const customGoal = parseFloat(msg.text);
                if (isNaN(customGoal) || customGoal <= 0) {
                    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
                    return;
                }
                userTemp.set(chatId, { goal: customGoal });
                await bot.sendMessage(
                    chatId, 
                    `–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å: ${customGoal} –ª\n–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?`,
                    createTimeKeyboard()
                );
            });
        } else {
            const goalValue = parseFloat(goal);
            userTemp.set(chatId, { goal: goalValue });
            await bot.sendMessage(
                chatId, 
                `–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å: ${goalValue} –ª\n–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?`,
                createTimeKeyboard()
            );
        }
    } else if (data.startsWith('time_')) {
        const time = data.split('_')[1];
        const userData = userTemp.get(chatId);
        const dailyGoal = userData ? userData.goal : 2.5;
        
        await db.addUser(chatId, dailyGoal, time);
        await bot.sendMessage(
            chatId,
            `–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–¶–µ–ª—å: ${dailyGoal} –ª/–¥–µ–Ω—å\n–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${time}`,
            mainKeyboard
        );
        await bot.deleteMessage(chatId, query.message.message_id);
        userTemp.delete(chatId); // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    } else if (data.startsWith('water_')) {
        const amount = data.split('_')[1];
        if (amount === 'custom') {
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.4):');
            bot.once('message', async (msg) => {
                const customAmount = parseFloat(msg.text);
                if (isNaN(customAmount) || customAmount <= 0) {
                    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
                    return;
                }
                await addWaterIntake(chatId, customAmount);
            });
        } else if (amount === 'add') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É" –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)?', waterAmountKeyboard);
        } else {
            await addWaterIntake(chatId, parseFloat(amount));
        }
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        if (query.message) {
            await bot.deleteMessage(chatId, query.message.message_id);
        }
    } else if (data.startsWith('stats_')) {
        const period = data.split('_')[1];
        await showStats(chatId, period);
    } else if (data.startsWith('reset_')) {
        const action = data.split('_')[1];
        if (action === 'confirm') {
            await db.deleteUser(chatId);
            await bot.sendMessage(chatId, '–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
        } else {
            await bot.sendMessage(chatId, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω.', mainKeyboard);
        }
        await bot.deleteMessage(chatId, query.message.message_id);
    } else if (data.startsWith('settings_')) {
        const action = data.split('_')[1];
        if (action === 'goal') {
            await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ:', goalKeyboard);
        } else if (action === 'time') {
            await bot.sendMessage(
                chatId,
                '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
                createTimeKeyboard()
            );
        } else if (action.startsWith('dnd')) {
            const status = action.split('_')[1] === 'true';
            await db.updateDoNotDisturb(chatId, status);
            await bot.sendMessage(
                chatId,
                `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status ? '–æ—Ç–∫–ª—é—á–µ–Ω—ã' : '–≤–∫–ª—é—á–µ–Ω—ã'}.`
            );
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const user = await db.getUser(chatId);
            const settingsKeyboard = createSettingsKeyboard(user);
            await bot.editMessageReplyMarkup(
                settingsKeyboard.reply_markup,
                {
                    chat_id: chatId,
                    message_id: query.message.message_id
                }
            );
        }
    } else if (data.startsWith('dnd_')) {
        if (data === 'dnd_today') {
            await db.updateDoNotDisturb(chatId, true);
            await bot.sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è.');
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–æ–ª–Ω–æ—á—å
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(0, 0, 0, 0);
            const timeUntilMidnight = tomorrow - now;
            
            setTimeout(async () => {
                await db.updateDoNotDisturb(chatId, false);
            }, timeUntilMidnight);
        }
        if (query.message) {
            await bot.deleteMessage(chatId, query.message.message_id);
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
function createSettingsKeyboard(user) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å', callback_data: 'settings_goal' }],
                [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'settings_time' }],
                [{ 
                    text: user.do_not_disturb ? '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    callback_data: `settings_dnd_${!user.do_not_disturb}`
                }]
            ]
        }
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.onText(/‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await db.getUser(chatId);

    await bot.sendMessage(
        chatId,
        `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–¶–µ–ª—å: ${user.daily_goal} –ª/–¥–µ–Ω—å\n–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${user.notification_time}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.do_not_disturb ? '–æ—Ç–∫–ª—é—á–µ–Ω—ã' : '–≤–∫–ª—é—á–µ–Ω—ã'}`,
        createSettingsKeyboard(user)
    );
});

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
async function addWaterIntake(chatId, amount) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (amount <= 0) {
        await bot.sendMessage(chatId, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.');
        return;
    }
    if (amount > 3) {
        await bot.sendMessage(chatId, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑. –ú–∞–∫—Å–∏–º—É–º 3 –ª–∏—Ç—Ä–∞.');
        return;
    }

    try {
        await db.addWaterIntake(chatId, amount);
        const today = new Date();
        const dailyTotal = await db.getDailyWaterIntake(chatId, today);
        const user = await db.getUser(chatId);

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progressPercentage = Math.min((dailyTotal / user.daily_goal) * 100, 100);
        const progressBarLength = 20;
        const filledLength = Math.floor((progressPercentage * progressBarLength) / 100);
        const progressBar = 'üåä'.repeat(filledLength) + '‚ö™'.repeat(progressBarLength - filledLength);

        let message = `–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –ª –≤–æ–¥—ã!\n\n`;
        message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressBar} ${progressPercentage.toFixed(1)}%\n`;
        message += `–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${dailyTotal.toFixed(2)} –ª –∏–∑ ${user.daily_goal} –ª\n`;
        
        if (dailyTotal >= user.daily_goal) {
            message += '\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –¥–æ—Å—Ç–∏–≥(–ª–∞) —Å–≤–æ–µ–π –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏!';
        } else {
            message += `\n–û—Å—Ç–∞–ª–æ—Å—å: ${(user.daily_goal - dailyTotal).toFixed(2)} –ª –¥–æ —Ü–µ–ª–∏`;
        }

        await bot.sendMessage(chatId, message, mainKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showStats(chatId, period) {
    const user = await db.getUser(chatId);
    let history;
    let message = '';

    try {
        switch (period) {
            case 'today': {
                const today = new Date();
                const dailyTotal = await db.getDailyWaterIntake(chatId, today);
                const progressPercentage = Math.min((dailyTotal / user.daily_goal) * 100, 100);
                const progressBarLength = 20;
                const filledLength = Math.floor((progressPercentage * progressBarLength) / 100);
                const progressBar = 'üåä'.repeat(filledLength) + '‚ö™'.repeat(progressBarLength - filledLength);

                message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';
                message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressBar} ${progressPercentage.toFixed(1)}%\n`;
                message += `–í—ã–ø–∏—Ç–æ: ${dailyTotal.toFixed(2)} –ª –∏–∑ ${user.daily_goal} –ª\n`;
                if (dailyTotal >= user.daily_goal) {
                    message += '‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!';
                } else {
                    message += `‚ùå –û—Å—Ç–∞–ª–æ—Å—å: ${(user.daily_goal - dailyTotal).toFixed(2)} –ª`;
                }
                break;
            }
            case 'week':
                history = await db.getWaterHistory(chatId, 7);
                message = await formatHistoryMessage('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:', history);
                break;
            case 'month':
                history = await db.getWaterHistory(chatId, 30);
                message = await formatHistoryMessage('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:', history);
                break;
            case 'all': {
                const stats = await db.getWaterStats(chatId);
                message = 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n';
                message += `üìÖ –î–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${stats.total_days}\n`;
                message += `üíß –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: ${stats.avg_daily} –ª/–¥–µ–Ω—å\n`;
                message += `üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ü–µ–ª–µ–π: ${stats.goals_achieved} –∏–∑ ${stats.total_days} –¥–Ω–µ–π\n`;
                message += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((stats.goals_achieved / stats.total_days) * 100).toFixed(1)}%\n`;
                
                if (stats.avg_daily >= stats.current_goal) {
                    message += '\nüåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–æ—Å—Ç–∏–≥–∞–µ—à—å —Å–≤–æ–µ–π —Ü–µ–ª–∏!';
                } else {
                    const diff = stats.current_goal - stats.avg_daily;
                    message += `\nüí™ –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–∏—Ç—å –Ω–∞ ${diff.toFixed(2)} –ª –±–æ–ª—å—à–µ –≤ –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏`;
                }
                break;
            }
        }

        await bot.sendMessage(chatId, message, {
            reply_markup: statsKeyboard.reply_markup,
            parse_mode: 'HTML'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async function formatHistoryMessage(title, history) {
    let message = `${title}\n\n`;
    let totalAmount = 0;
    let goalsAchieved = 0;

    for (const day of history) {
        const date = new Date(day.date).toLocaleDateString('ru-RU');
        const achieved = day.total >= day.goal ? '‚úÖ' : '‚ùå';
        const percentage = ((day.total / day.goal) * 100).toFixed(1);
        
        message += `${date}: ${day.total.toFixed(2)} –ª ${achieved} (${percentage}%)\n`;
        totalAmount += day.total;
        if (day.total >= day.goal) goalsAchieved++;
    }

    const avgAmount = totalAmount / history.length;
    const successRate = (goalsAchieved / history.length) * 100;

    message += `\nüìà –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: ${avgAmount.toFixed(2)} –ª/–¥–µ–Ω—å`;
    message += `\nüéØ –¶–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã: ${goalsAchieved} –∏–∑ ${history.length} –¥–Ω–µ–π (${successRate.toFixed(1)}%)`;

    return message;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.onText(/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', statsKeyboard);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
function scheduleReminders() {
    schedule.scheduleJob('0 * * * *', async () => {
        const now = new Date();
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();

        const users = await db.getAllUsers();
        for (const user of users) {
            if (user.do_not_disturb) continue;

            const [hours, minutes] = user.notification_time.split(':').map(Number);
            if (hours === currentHour && minutes === currentMinute) {
                const dailyTotal = await db.getDailyWaterIntake(user.user_id, now);
                if (dailyTotal < user.daily_goal) {
                    const remaining = user.daily_goal - dailyTotal;
                    const reminderKeyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É', callback_data: 'water_add' },
                                    { text: '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è', callback_data: 'dnd_today' }
                                ]
                            ]
                        }
                    };
                    await bot.sendMessage(
                        user.user_id,
                        `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å ${remaining.toFixed(2)} –ª –≤–æ–¥—ã, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏.`,
                        reminderKeyboard
                    );
                }
            }
        }
    });
}

scheduleReminders();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', error);
});
