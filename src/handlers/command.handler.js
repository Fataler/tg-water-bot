const telegramService = require('../services/telegram.service');
const dbService = require('../services/database.service');
const notificationService = require('../services/notification.service');
const KeyboardUtil = require('../utils/keyboard.util');
const ValidationUtil = require('../utils/validation.util');
const config = require('../config/config');

class CommandHandler {
    async handleStart(msg) {
        const chatId = msg.chat.id;
        const user = await dbService.getUser(chatId);

        if (!user) {
            await telegramService.sendMessage(
                chatId, 
                'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤–æ–¥—ã. üíß\n\n' +
                'üéØ –î–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–≤–æ—é —Ü–µ–ª—å –Ω–∞ –¥–µ–Ω—å:',
                KeyboardUtil.getGoalKeyboard()
            );
        } else {
            try {
                await telegramService.sendMessage(
                    chatId, 
                    'üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üí™',
                    KeyboardUtil.getMainKeyboard()
                );
            } catch (error) {
                if (error.response?.body?.error_code === 403 || error.response?.body?.error_code === 400) {
                    await dbService.deleteUser(chatId);
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω)`);
                }
            }
        }
    }

    async handleReset(msg) {
        const chatId = msg.chat.id;
        const confirmKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data: 'reset_confirm' },
                        { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'reset_cancel' }
                    ]
                ]
            }
        };
        await telegramService.sendMessage(
            chatId, 
            '‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω(–∞), —á—Ç–æ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?',
            confirmKeyboard
        );
    }

    async handleAddWater(msg) {
        const chatId = msg.chat.id;
        await telegramService.sendMessage(
            chatId,
            'ü•§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–∏—Ç–∫–∞:',
            KeyboardUtil.getDrinkTypeKeyboard()
        );
    }

    async handleStats(msg) {
        const chatId = msg.chat.id;
        await telegramService.sendMessage(
            chatId, 
            'üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:',
            KeyboardUtil.getStatsKeyboard()
        );
    }

    async handleSettings(msg) {
        const chatId = msg.chat.id;
        const user = await dbService.getUser(chatId);
        if (user) {
            try {
                // First send the message with initial keyboard
                const message = await telegramService.sendMessage(
                    chatId,
                    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:',
                    KeyboardUtil.getSettingsKeyboard(user, null)
                );
                
                // Then update it with the message ID in the keyboard
                await telegramService.editMessage(
                    chatId,
                    message.message_id,
                    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:',
                    KeyboardUtil.getSettingsKeyboard(user, message.message_id)
                );
            } catch (error) {
                console.error('Error handling settings:', error);
                await telegramService.sendMessage(
                    chatId,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    KeyboardUtil.getMainKeyboard()
                );
            }
        }
    }

    async handleHelp(msg) {
        const chatId = msg.chat.id;
        const helpText = `üö∞ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n` +
            `*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É - –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è\n` +
            `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n` +
            `\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n` +
            `/reset - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫\n` +
            `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
            `\n*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n` +
            `1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã\n` +
            `2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n` +
            `3. –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –ø—å—ë—Ç–µ –≤–æ–¥—É, –Ω–∞–∂–∏–º–∞–π—Ç–µ "üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É"\n` +
            `4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"`;

        await telegramService.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
    }

    async handleDebug(msg) {
        const chatId = msg.chat.id;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (config.adminIds && config.adminIds.includes(chatId)) {
            try {
                const user = await dbService.getUser(chatId);
                if (!user) {
                    await telegramService.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }
                await notificationService.sendReminder(user);
                await telegramService.sendMessage(chatId, '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            } catch (error) {
                console.error('Error sending debug notification:', error);
                await telegramService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            }
        } else {
            await telegramService.sendMessage(chatId, '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        }
    }

    setupHandlers() {
        telegramService.onText(/\/start/, this.handleStart);
        telegramService.onText(/\/reset/, this.handleReset);
        telegramService.onText(/üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É/, this.handleAddWater);
        telegramService.onText(/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, this.handleStats);
        telegramService.onText(/‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏/, this.handleSettings);
        telegramService.onText(/\/help/, this.handleHelp);
        telegramService.onText(/\/debug/, this.handleDebug);
    }
}

module.exports = new CommandHandler();
