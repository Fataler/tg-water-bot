const telegramService = require('../services/telegram.service');
const dbService = require('../services/database.service');
const notificationService = require('../services/notification.service');
const KeyboardUtil = require('../utils/keyboard.util');
const ValidationUtil = require('../utils/validation.util');
const config = require('../config/config');

class CallbackHandler {
    constructor() {
        this.userTemp = new Map();
    }

    handlers = {
        goal: (chatId, data) => this.handleGoalCallback(chatId, data),
        water: (chatId, data) => this.handleWaterCallback(chatId, data),
        other: (chatId, data) => this.handleOtherDrinkCallback(chatId, data),
        drink: (chatId, data) => this.handleDrinkTypeCallback(chatId, data),
        stats: (chatId, data) => this.handleStatsCallback(chatId, data),
        settings: (chatId, data) => this.handleSettingsCallback(chatId, data),
        time: (chatId, data) => this.handleTimeCallback(chatId, data),
        reset: (chatId, data) => this.handleResetCallback(chatId, data)
    };

    async handleCallback(query) {
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const data = query.data;

        try {
            const handlerName = data.split('_')[0];

            if (this.handlers[handlerName]) {
                await this.handlers[handlerName](chatId, data);
            }

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
            await telegramService.getBot().answerCallbackQuery(query.id);
        } catch (error) {
            console.error('Error handling callback:', error);
            await telegramService.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleGoalCallback(chatId, data) {
        const goal = data.split('_')[1];
        
        if (goal === 'custom') {
            await telegramService.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–ª—å –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):');
            this.userTemp.set(chatId, { waitingFor: 'custom_goal' });
            return;
        }

        const numGoal = parseFloat(goal);
        if (ValidationUtil.isValidGoal(numGoal)) {
            const user = await dbService.getUser(chatId);
            if (user) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—å
                await dbService.addUser(chatId, numGoal, user.notification_time);
                await telegramService.sendMessage(
                    chatId,
                    '–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
                    KeyboardUtil.getMainKeyboard()
                );
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await dbService.addUser(chatId, numGoal, '12:00');
                await telegramService.sendMessage(
                    chatId,
                    '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:',
                    KeyboardUtil.createTimeKeyboard()
                );
            }
        }
    }

    async handleWaterCallback(chatId, data) {
        const amount = data.split('_')[1];
        
        if (amount === 'custom') {
            await telegramService.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):');
            this.userTemp.set(chatId, { waitingFor: 'custom_water' });
            return;
        }

        const numAmount = parseFloat(amount);
        if (!ValidationUtil.isValidAmount(numAmount)) {
            await telegramService.sendMessage(chatId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        try {
            await dbService.addWaterIntake(chatId, numAmount, 'water');
            const dailyIntake = await dbService.getDailyWaterIntake(chatId);
            const user = await dbService.getUser(chatId);
            const goal = user.daily_goal;
            
            await telegramService.sendMessage(
                chatId,
                `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${numAmount}–ª –≤–æ–¥—ã!\n\n` +
                `üíß –í–æ–¥–∞: ${dailyIntake.water}–ª\n` +
                `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${dailyIntake.other}–ª\n` +
                `üìä –í—Å–µ–≥–æ: ${dailyIntake.total}–ª –∏–∑ ${goal}–ª`
            );
        } catch (error) {
            console.error('Error adding water:', error);
            await telegramService.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleOtherDrinkCallback(chatId, data) {
        const amount = data.split('_')[1];
        
        if (amount === 'custom') {
            await telegramService.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):');
            this.userTemp.set(chatId, { waitingFor: 'custom_other' });
            return;
        }

        const numAmount = parseFloat(amount);
        if (!ValidationUtil.isValidAmount(numAmount)) {
            await telegramService.sendMessage(chatId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        try {
            await dbService.addWaterIntake(chatId, numAmount, 'other');
            const dailyIntake = await dbService.getDailyWaterIntake(chatId);
            const user = await dbService.getUser(chatId);
            const goal = user.daily_goal;
            
            await telegramService.sendMessage(
                chatId,
                `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${numAmount}–ª –¥—Ä—É–≥–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞!\n\n` +
                `üíß –í–æ–¥–∞: ${dailyIntake.water}–ª\n` +
                `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${dailyIntake.other}–ª\n` +
                `üìä –í—Å–µ–≥–æ: ${dailyIntake.total}–ª –∏–∑ ${goal}–ª`
            );
        } catch (error) {
            console.error('Error adding other drink:', error);
            await telegramService.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleStatsCallback(chatId, data) {
        const period = data.split('_')[1];
        await this.showStats(chatId, period);
    }

    async handleSettingsCallback(chatId, data) {
        const setting = data.split('_')[1];
        const value = data.split('_')[2];

        switch (setting) {
            case 'goal':
                await telegramService.sendMessage(
                    chatId,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:',
                    KeyboardUtil.getGoalKeyboard()
                );
                break;
            case 'time':
                await telegramService.sendMessage(
                    chatId,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:',
                    KeyboardUtil.createTimeKeyboard()
                );
                break;
            case 'notifications':
                const status = value === 'true';
                await dbService.updateDoNotDisturb(chatId, !status);
                if (status) {
                    await notificationService.updateUserReminder(chatId);
                } else {
                    notificationService.cancelUserReminders(chatId);
                }
                await telegramService.sendMessage(
                    chatId,
                    status ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
                    KeyboardUtil.getMainKeyboard()
                );
                break;
        }
    }

    async handleTimeCallback(chatId, data) {
        const time = data.split('_')[1];
        if (ValidationUtil.isValidTime(time)) {
            const user = await dbService.getUser(chatId);
            await dbService.addUser(chatId, user ? user.daily_goal : config.validation.water.defaultGoal, time);
            await notificationService.updateUserReminder(chatId);
            await telegramService.sendMessage(
                chatId,
                user ? '–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleResetCallback(chatId, data) {
        const action = data.split('_')[1];
        if (action === 'confirm') {
            await dbService.deleteUser(chatId);
            notificationService.cancelUserReminders(chatId);
            await telegramService.sendMessage(
                chatId,
                '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start'
            );
        } else {
            await telegramService.sendMessage(
                chatId,
                '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleDrinkTypeCallback(chatId, data) {
        const type = data.split('_')[1];
        
        if (type === 'water') {
            await telegramService.sendMessage(
                chatId,
                '–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)?',
                KeyboardUtil.getWaterAmountKeyboard()
            );
        } else if (type === 'other') {
            await telegramService.sendMessage(
                chatId,
                '–°–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —Ç—ã –≤—ã–ø–∏–ª(–∞)?',
                KeyboardUtil.getOtherDrinkAmountKeyboard()
            );
        }
    }

    async addWaterIntake(chatId, amount) {
        try {
            await dbService.addWaterIntake(chatId, amount);
            const user = await dbService.getUser(chatId);
            const dailyIntake = await dbService.getDailyWaterIntake(chatId, new Date());
            const percentage = ValidationUtil.formatPercentage(dailyIntake, user.daily_goal);
            const progressBar = ValidationUtil.createProgressBar(percentage);

            const message = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${ValidationUtil.formatWaterAmount(amount)}\n\n` +
                          `–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: ${ValidationUtil.formatWaterAmount(dailyIntake)}\n` +
                          `–¶–µ–ª—å: ${ValidationUtil.formatWaterAmount(user.daily_goal)}\n` +
                          `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%\n${progressBar}`;

            await telegramService.sendMessage(chatId, message, KeyboardUtil.getMainKeyboard());
        } catch (error) {
            console.error('Error adding water intake:', error);
            await telegramService.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async showStats(chatId, period) {
        try {
            const user = await dbService.getUser(chatId);
            let stats;
            let title;

            switch (period) {
                case 'today':
                    stats = await dbService.getDailyWaterIntake(chatId);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è';
                    break;
                case 'week':
                    stats = await dbService.getWaterHistory(chatId, 7);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é';
                    break;
                case 'month':
                    stats = await dbService.getWaterHistory(chatId, 30);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü';
                    break;
                case 'all':
                    stats = await dbService.getWaterStats(chatId);
                    title = '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';
                    break;
            }

            const message = this.formatStatsMessage(title, stats, period, user.daily_goal);
            await telegramService.sendMessage(chatId, message, KeyboardUtil.getMainKeyboard());
        } catch (error) {
            console.error('Error showing stats:', error);
            await telegramService.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleStats(msg) {
        const chatId = msg.chat.id;
        const dailyIntake = await dbService.getDailyWaterIntake(chatId);
        const user = await dbService.getUser(chatId);
        const goal = user.daily_goal;
        
        let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏:\n\n';
        message += `üíß –í–æ–¥–∞: ${dailyIntake.water}–ª\n`;
        message += `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${dailyIntake.other}–ª\n`;
        message += `üìä –í—Å–µ–≥–æ: ${dailyIntake.total}–ª –∏–∑ ${goal}–ª\n\n`;
        
        const percentage = Math.round((dailyIntake.total / goal) * 100);
        message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%\n`;
        message += this.getProgressBar(percentage);
        
        await telegramService.sendMessage(chatId, message);
    }

    getProgressBar(percentage) {
        const filledCount = Math.floor(percentage / 10);
        const emptyCount = 10 - filledCount;
        return 'üü¶'.repeat(filledCount) + '‚¨úÔ∏è'.repeat(emptyCount);
    }

    formatStatsMessage(title, stats, period, dailyGoal) {
        let message = `üìä ${title}\n\n`;

        if (period === 'today') {
            const percentage = ValidationUtil.formatPercentage(stats.total, dailyGoal);
            message += `üíß –í–æ–¥–∞: ${stats.water}–ª\n`;
            message += `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${stats.other}–ª\n`;
            message += `üìä –í—Å–µ–≥–æ: ${stats.total}–ª –∏–∑ ${dailyGoal}–ª\n`;
            message += `‚ú® –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%\n`;
            message += this.getProgressBar(percentage);
        } else {
            stats.forEach(day => {
                const date = new Date(day.date);
                const formattedDate = date.toLocaleDateString('ru-RU', { weekday: 'short', month: 'short', day: 'numeric' });
                message += `${formattedDate}:\n`;
                message += `üíß –í–æ–¥–∞: ${day.water}–ª\n`;
                message += `ü•§ –î—Ä—É–≥–∏–µ: ${day.other}–ª\n`;
                message += `üìä –í—Å–µ–≥–æ: ${day.total}–ª\n\n`;
            });
        }

        return message;
    }

    setupHandler() {
        telegramService.onCallback(this.handleCallback.bind(this));
    }
}

module.exports = new CallbackHandler();
