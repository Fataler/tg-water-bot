const telegramService = require('../services/telegram.service');
const dbService = require('../services/database.service');
const notificationService = require('../services/notification.service');
const KeyboardUtil = require('../utils/keyboard.util');
const ValidationUtil = require('../utils/validation.util');
const config = require('../config/config');

class CallbackHandler {
    constructor() {
        this.userTemp = new Map();
    }

    handlers = {
        goal: (chatId, data, messageId) => this.handleGoalCallback(chatId, data, messageId),
        water: (chatId, data, messageId) => this.handleWaterCallback(chatId, data, messageId),
        other: (chatId, data, messageId) => this.handleOtherDrinkCallback(chatId, data, messageId),
        drink: (chatId, data, messageId) => this.handleDrinkTypeCallback(chatId, data, messageId),
        stats: (chatId, data, messageId) => this.handleStatsCallback(chatId, data, messageId),
        settings: (chatId, data, messageId) => this.handleSettingsCallback(chatId, data, messageId),
        reset: (chatId, data, messageId) => this.handleResetCallback(chatId, data, messageId)
    };

    async handleCallback(query) {
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const data = query.data;

        try {
            const handlerName = data.split('_')[0];

            if (this.handlers[handlerName]) {
                await this.handlers[handlerName](chatId, data, messageId);
            }

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
            await telegramService.getBot().answerCallbackQuery(query.id);
        } catch (error) {
            console.error('Error handling callback:', error);
            await telegramService.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleGoalCallback(chatId, data, messageId) {
        const goal = data.split('_')[1];
        
        if (goal === 'custom') {
            await telegramService.sendMessage(chatId, 'üéØ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–ª—å –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5–ª):');
            this.userTemp.set(chatId, { waitingFor: 'custom_goal' });
            return;
        }

        const numGoal = parseFloat(goal);
        if (ValidationUtil.isValidGoal(numGoal)) {
            await dbService.addUser(chatId, numGoal);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await notificationService.updateUserReminder(chatId);
            
            await telegramService.sendMessage(
                chatId,
                'üéâ –û—Ç–ª–∏—á–Ω–æ! –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n' +
                'ü§ñ –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è:\n' +
                'üåÖ –£—Ç—Ä–æ–º (30% –æ—Ç —Ü–µ–ª–∏)\n' +
                '‚òÄÔ∏è –î–Ω—ë–º (50% –æ—Ç —Ü–µ–ª–∏)\n' +
                'üåÜ –í–µ—á–µ—Ä–æ–º (20% –æ—Ç —Ü–µ–ª–∏)\n\n' +
                'üí™ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º! üíß',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleWaterCallback(chatId, data, messageId) {
        const [_, amount] = data.split('_');
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await telegramService.deleteMessage(chatId, messageId);
        
        if (amount === 'custom') {
            await telegramService.sendMessage(chatId, 'üíß –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):');
            this.userTemp.set(chatId, { waitingFor: 'custom_water' });
            return;
        }

        const numAmount = parseFloat(amount);
        if (!ValidationUtil.isValidAmount(numAmount)) {
            await telegramService.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        try {
            await dbService.addWaterIntake(chatId, numAmount, 'water');
            const dailyIntake = await dbService.getDailyWaterIntake(chatId);
            const user = await dbService.getUser(chatId);
            const goal = user.daily_goal;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await notificationService.updateUserReminder(chatId);
            
            await telegramService.sendMessage(
                chatId,
                `üéØ –û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ ${ValidationUtil.formatWaterAmount(numAmount)}!\n\n` +
                `üíß –í–æ–¥–∞: ${ValidationUtil.formatWaterAmount(dailyIntake.water)}\n` +
                `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${ValidationUtil.formatWaterAmount(dailyIntake.other)}\n` +
                `üìä –í—Å–µ–≥–æ: ${ValidationUtil.formatWaterAmount(dailyIntake.total)} –∏–∑ ${ValidationUtil.formatWaterAmount(goal)}\n\n` +
                `${dailyIntake.total >= goal ? 'üéâ –¢—ã –¥–æ—Å—Ç–∏–≥(–ª–∞) –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™' : 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}`,
                KeyboardUtil.getMainKeyboard()
            );
        } catch (error) {
            console.error('Error adding water:', error);
            await telegramService.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleOtherDrinkCallback(chatId, data, messageId) {
        const [_, amount] = data.split('_');
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await telegramService.deleteMessage(chatId, messageId);
        
        if (amount === 'custom') {
            await telegramService.sendMessage(chatId, 'ü•§ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):');
            this.userTemp.set(chatId, { waitingFor: 'custom_other' });
            return;
        }

        const numAmount = parseFloat(amount);
        if (!ValidationUtil.isValidAmount(numAmount)) {
            await telegramService.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        try {
            await dbService.addWaterIntake(chatId, numAmount, 'other');
            const dailyIntake = await dbService.getDailyWaterIntake(chatId);
            const user = await dbService.getUser(chatId);
            const goal = user.daily_goal;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await notificationService.updateUserReminder(chatId);
            
            await telegramService.sendMessage(
                chatId,
                `üéØ –û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ ${ValidationUtil.formatWaterAmount(numAmount)} –¥—Ä—É–≥–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞!\n\n` +
                `üíß –í–æ–¥–∞: ${ValidationUtil.formatWaterAmount(dailyIntake.water)}\n` +
                `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${ValidationUtil.formatWaterAmount(dailyIntake.other)}\n` +
                `üìä –í—Å–µ–≥–æ: ${ValidationUtil.formatWaterAmount(dailyIntake.total)} –∏–∑ ${ValidationUtil.formatWaterAmount(goal)}\n\n` +
                `${dailyIntake.total >= goal ? 'üéâ –¢—ã –¥–æ—Å—Ç–∏–≥(–ª–∞) –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™' : 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}`,
                KeyboardUtil.getMainKeyboard()
            );
        } catch (error) {
            console.error('Error adding other drink:', error);
            await telegramService.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleStatsCallback(chatId, data, messageId) {
        const [_, period] = data.split('_');
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
        await telegramService.deleteMessage(chatId, messageId);
        
        await this.showStats(chatId, period);
    }

    async handleSettingsCallback(chatId, data, messageId) {
        const [_, setting, value] = data.split('_');
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await telegramService.deleteMessage(chatId, messageId);

        switch (setting) {
            case 'goal':
                await telegramService.sendMessage(
                    chatId,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:',
                    KeyboardUtil.getGoalKeyboard()
                );
                break;
            case 'notifications':
                const status = value === 'true';
                await dbService.updateDoNotDisturb(chatId, !status);
                if (status) {
                    await notificationService.updateUserReminder(chatId);
                } else {
                    notificationService.cancelUserReminders(chatId);
                }
                await telegramService.sendMessage(
                    chatId,
                    status ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
                    KeyboardUtil.getMainKeyboard()
                );
                break;
        }
    }

    async handleTimeCallback(chatId, data, messageId) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º –Ω–∞ —Å–ª—É—á–∞–π,
        // –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å—ë –µ—â—ë —Å–æ–¥–µ—Ä–∂–∞—Ç time_ –∫–æ–ª–±—ç–∫–∏
        await telegramService.deleteMessage(chatId, messageId);
        await telegramService.sendMessage(
            chatId,
            '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –¢–µ–ø–µ—Ä—å –±–æ—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!',
            KeyboardUtil.getMainKeyboard()
        );
    }

    async handleResetCallback(chatId, data, messageId) {
        const action = data.split('_')[1];
        if (action === 'confirm') {
            await dbService.deleteUser(chatId);
            notificationService.cancelUserReminders(chatId);
            await telegramService.sendMessage(
                chatId,
                '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start'
            );
        } else {
            await telegramService.sendMessage(
                chatId,
                '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleDrinkTypeCallback(chatId, data, messageId) {
        const type = data.split('_')[1];
        
        try {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –Ω–∞–ø–∏—Ç–∫–∞
            await telegramService.deleteMessage(chatId, messageId);
            
            if (type === 'water') {
                const message = await telegramService.sendMessage(
                    chatId,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã:',
                    KeyboardUtil.getWaterAmountKeyboard()
                );
                const editedMessage = await telegramService.editMessage(
                    chatId,
                    message.message_id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã:',
                    KeyboardUtil.getWaterAmountKeyboard(message.message_id)
                );
            } else if (type === 'other') {
                const message = await telegramService.sendMessage(
                    chatId,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—Ç–∫–∞:',
                    KeyboardUtil.getOtherDrinkAmountKeyboard()
                );
                const editedMessage = await telegramService.editMessage(
                    chatId,
                    message.message_id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—Ç–∫–∞:',
                    KeyboardUtil.getOtherDrinkAmountKeyboard(message.message_id)
                );
            }
        } catch (error) {
            console.error('Error handling drink type:', error);
            await telegramService.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async addWaterIntake(chatId, amount) {
        try {
            await dbService.addWaterIntake(chatId, amount);
            const user = await dbService.getUser(chatId);
            const dailyIntake = await dbService.getDailyWaterIntake(chatId);
            const percentage = ValidationUtil.formatPercentage(dailyIntake, user.daily_goal);
            const progressBar = ValidationUtil.createProgressBar(percentage);

            const message = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${ValidationUtil.formatWaterAmount(amount)}\n\n` +
                          `–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: ${ValidationUtil.formatWaterAmount(dailyIntake)}\n` +
                          `–¶–µ–ª—å: ${ValidationUtil.formatWaterAmount(user.daily_goal)}\n` +
                          `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%\n${progressBar}`;

            await telegramService.sendMessage(chatId, message, KeyboardUtil.getMainKeyboard());
        } catch (error) {
            console.error('Error adding water intake:', error);
            await telegramService.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async showStats(chatId, period) {
        try {
            const user = await dbService.getUser(chatId);
            let stats;
            let title;

            switch (period) {
                case 'today':
                    stats = await dbService.getDailyWaterIntake(chatId);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è';
                    break;
                case 'week':
                    stats = await dbService.getWaterHistory(chatId, 7);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é';
                    break;
                case 'month':
                    stats = await dbService.getWaterHistory(chatId, 30);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü';
                    break;
                case 'all':
                    stats = await dbService.getWaterStats(chatId);
                    title = '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';
                    break;
            }

            const message = this.formatStatsMessage(title, stats, period, user.daily_goal);
            await telegramService.sendMessage(chatId, message, KeyboardUtil.getMainKeyboard());
        } catch (error) {
            console.error('Error showing stats:', error);
            await telegramService.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleStats(msg) {
        const chatId = msg.chat.id;
        const dailyIntake = await dbService.getDailyWaterIntake(chatId);
        const user = await dbService.getUser(chatId);
        const goal = user.daily_goal;
        
        let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏:\n\n';
        message += `üíß –í–æ–¥–∞: ${ValidationUtil.formatWaterAmount(dailyIntake.water)}\n`;
        message += `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${ValidationUtil.formatWaterAmount(dailyIntake.other)}\n`;
        message += `üìä –í—Å–µ–≥–æ: ${ValidationUtil.formatWaterAmount(dailyIntake.total)} –∏–∑ ${ValidationUtil.formatWaterAmount(goal)}\n\n`;
        
        const percentage = Math.round((dailyIntake.total / goal) * 100);
        message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%\n`;
        message += this.getProgressBar(percentage);
        
        await telegramService.sendMessage(chatId, message);
    }

    getProgressBar(percentage) {
        const filledCount = Math.floor(percentage / 10);
        const emptyCount = 10 - filledCount;
        return 'üü¶'.repeat(filledCount) + '‚¨úÔ∏è'.repeat(emptyCount);
    }

    formatStatsMessage(title, stats, period, dailyGoal) {
        let message = `üìä ${title}\n\n`;

        if (period === 'today') {
            const percentage = ValidationUtil.formatPercentage(stats.total, dailyGoal);
            message += `üíß –í–æ–¥–∞: ${ValidationUtil.formatWaterAmount(stats.water)}\n`;
            message += `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${ValidationUtil.formatWaterAmount(stats.other)}\n`;
            message += `üìä –í—Å–µ–≥–æ: ${ValidationUtil.formatWaterAmount(stats.total)} –∏–∑ ${ValidationUtil.formatWaterAmount(dailyGoal)}\n`;
            message += `‚ú® –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%\n`;
            message += this.getProgressBar(percentage);
        } else if (period === 'all') {
            message += `üìÖ –î–Ω–µ–π –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${stats.days}\n`;
            message += `üíß –û–±—â–∏–π –æ–±—ä–µ–º: ${ValidationUtil.formatWaterAmount(stats.total)}\n`;
            message += `üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${stats.average.toFixed(2)}\n`;
            message += `üèÜ –ú–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å: ${ValidationUtil.formatWaterAmount(stats.max)} (${stats.maxDate})\n`;
        } else {
            stats.forEach(day => {
                const date = new Date(day.date);
                const formattedDate = date.toLocaleDateString('ru-RU', { weekday: 'short', month: 'short', day: 'numeric' });
                message += `${formattedDate}:\n`;
                message += `üíß –í–æ–¥–∞: ${ValidationUtil.formatWaterAmount(day.water)}\n`;
                message += `ü•§ –î—Ä—É–≥–∏–µ: ${ValidationUtil.formatWaterAmount(day.other)}\n`;
                message += `üìä –í—Å–µ–≥–æ: ${ValidationUtil.formatWaterAmount(day.total)}\n\n`;
            });
        }

        return message;
    }

    setupHandler() {
        telegramService.onCallback(this.handleCallback.bind(this));
    }
}

module.exports = new CallbackHandler();
