const telegramService = require('../services/telegram.service');
const dbService = require('../services/database.service');
const notificationService = require('../services/notification.service');
const KeyboardUtil = require('../utils/keyboard.util');
const ValidationUtil = require('../utils/validation.util');
const MessageUtil = require('../utils/message.util');
const config = require('../config/config');

class CallbackHandler {
    constructor() {
        this.userTemp = new Map();
    }

    handlers = {
        goal: (chatId, data, messageId) => this.handleGoalCallback(chatId, data, messageId),
        water: (chatId, data, messageId) => this.handleWaterCallback(chatId, data, messageId),
        other: (chatId, data, messageId) => this.handleOtherDrinkCallback(chatId, data, messageId),
        drink: (chatId, data, messageId) => this.handleDrinkTypeCallback(chatId, data, messageId),
        stats: (chatId, data, messageId) => this.handleStatsCallback(chatId, data, messageId),
        settings: (chatId, data, messageId) => this.handleSettingsCallback(chatId, data, messageId),
        reset: (chatId, data, messageId) => this.handleResetCallback(chatId, data, messageId),
    };

    async handleCallback(query) {
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const data = query.data;

        try {
            const handlerName = data.split('_')[0];

            if (this.handlers[handlerName]) {
                await this.handlers[handlerName](chatId, data, messageId);
            }

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
            await telegramService.getBot().answerCallbackQuery(query.id);
        } catch (error) {
            console.error('Error in callback handler:', error);
            await telegramService.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleGoalCallback(chatId, data, messageId) {
        const goal = data.split('_')[1];

        if (goal === 'custom') {
            await telegramService.sendMessage(
                chatId,
                'üéØ –°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤ –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–ø–∏–≤–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5–ª):'
            );
            this.userTemp.set(chatId, { waitingFor: 'custom_goal' });
            return;
        }

        const numGoal = parseFloat(goal);
        if (ValidationUtil.isValidGoal(numGoal)) {
            await dbService.addUser(chatId, numGoal);

            // –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await notificationService.updateUserReminder(chatId);

            await telegramService.sendMessage(
                chatId,
                MessageUtil.formatGoalSetMessage(numGoal),
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleDrinkIntake(chatId, amount, type = 'water') {
        if (amount === 'custom') {
            const message =
                type === 'water'
                    ? `üíß –°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)? (–æ—Ç ${config.validation.water.minAmount} –¥–æ ${config.validation.water.maxAmount}–ª):`
                    : `ü•§ –°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –Ω–∞–ø–∏—Ç–∫–∞ —Ç—ã –≤—ã–ø–∏–ª(–∞)? (–æ—Ç ${config.validation.water.minAmount} –¥–æ ${config.validation.water.maxAmount}–ª):`;
            await telegramService.sendMessage(chatId, message);
            this.userTemp.set(chatId, { waitingFor: `custom_${type}` });
            return;
        }

        const numAmount = parseFloat(amount);
        if (!ValidationUtil.isValidAmount(numAmount)) {
            await telegramService.sendMessage(
                chatId,
                `‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${config.validation.water.minAmount} –¥–æ ${config.validation.water.maxAmount} –ª–∏—Ç—Ä–æ–≤.`
            );
            return;
        }

        try {
            await dbService.addWaterIntake(chatId, numAmount, type);
            const dailyIntake = await dbService.getDailyWaterIntake(chatId);
            const user = await dbService.getUser(chatId);
            const goal = user.daily_goal;

            await notificationService.updateUserReminder(chatId);

            await telegramService.sendMessage(
                chatId,
                MessageUtil.formatWaterAddedMessage(numAmount, dailyIntake, goal),
                KeyboardUtil.getMainKeyboard()
            );
        } catch (error) {
            console.error('Error adding water intake:', error);
            await telegramService.sendMessage(
                chatId,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleWaterCallback(chatId, data, messageId) {
        const [_, amount] = data.split('_');
        await telegramService.deleteMessage(chatId, messageId);
        await this.handleDrinkIntake(chatId, amount, 'water');
    }

    async handleOtherDrinkCallback(chatId, data, messageId) {
        const [_, amount] = data.split('_');
        await telegramService.deleteMessage(chatId, messageId);
        await this.handleDrinkIntake(chatId, amount, 'other');
    }

    async addWaterIntake(chatId, amount) {
        await this.handleDrinkIntake(chatId, amount.toString());
    }

    async handleStatsCallback(chatId, data, messageId) {
        const [_, period] = data.split('_');

        await telegramService.deleteMessage(chatId, messageId);

        await this.showStats(chatId, period);
    }

    async handleSettingsCallback(chatId, data, messageId) {
        const [_, setting] = data.split('_');

        switch (setting) {
            case 'goal':
                await telegramService.sendMessage(
                    chatId,
                    '–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤ –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–ø–∏–≤–∞—Ç—å?',
                    KeyboardUtil.getGoalKeyboard()
                );
                break;
            default:
                await telegramService.sendMessage(
                    chatId,
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.',
                    KeyboardUtil.getMainKeyboard()
                );
        }
    }

    async handleResetCallback(chatId, data, messageId) {
        const action = data.split('_')[1];
        if (action === 'confirm') {
            await dbService.deleteUser(chatId);
            notificationService.cancelUserReminders(chatId);
            await telegramService.sendMessage(
                chatId,
                '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'
            );
        } else {
            await telegramService.sendMessage(
                chatId,
                '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    async handleDrinkTypeCallback(chatId, data, messageId) {
        const type = data.split('_')[1];

        try {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –Ω–∞–ø–∏—Ç–∫–∞
            await telegramService.deleteMessage(chatId, messageId);

            if (type === 'water') {
                const message = await telegramService.sendMessage(
                    chatId,
                    '–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)?',
                    KeyboardUtil.getWaterAmountKeyboard()
                );
                const editedMessage = await telegramService.editMessage(
                    chatId,
                    message.message_id,
                    '–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞)?',
                    KeyboardUtil.getWaterAmountKeyboard(message.message_id)
                );
            } else if (type === 'other') {
                const message = await telegramService.sendMessage(
                    chatId,
                    '–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –Ω–∞–ø–∏—Ç–∫–∞ —Ç—ã –≤—ã–ø–∏–ª(–∞)?',
                    KeyboardUtil.getOtherDrinkAmountKeyboard()
                );
                const editedMessage = await telegramService.editMessage(
                    chatId,
                    message.message_id,
                    '–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –Ω–∞–ø–∏—Ç–∫–∞ —Ç—ã –≤—ã–ø–∏–ª(–∞)?',
                    KeyboardUtil.getOtherDrinkAmountKeyboard(message.message_id)
                );
            }
        } catch (error) {
            console.error('Error handling drink type:', error);
            await telegramService.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleStats(msg) {
        const chatId = msg.chat.id;
        const dailyIntake = await dbService.getDailyWaterIntake(chatId);
        const user = await dbService.getUser(chatId);
        const goal = user.daily_goal;

        let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏:\n\n';
        message += MessageUtil.formatDailyStats(dailyIntake, goal, { showEmoji: false });

        await telegramService.sendMessage(chatId, message);
    }

    async showStats(chatId, period) {
        try {
            const user = await dbService.getUser(chatId);
            let stats;
            let title;

            switch (period) {
                case 'today':
                    stats = await dbService.getDailyWaterIntake(chatId);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è';
                    break;
                case 'week':
                    stats = await dbService.getWaterIntakeHistory(chatId, 7);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é';
                    break;
                case 'month':
                    stats = await dbService.getWaterIntakeHistory(chatId, 30);
                    title = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü';
                    break;
                case 'all':
                    stats = await dbService.getWaterStats(chatId);
                    title = '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';
                    break;
            }

            const message = MessageUtil.formatStatsMessage(title, stats, period, user.daily_goal);
            await telegramService.sendMessage(chatId, message, KeyboardUtil.getMainKeyboard());
        } catch (error) {
            console.error('Error showing stats:', error);
            await telegramService.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                KeyboardUtil.getMainKeyboard()
            );
        }
    }

    setupHandler() {
        telegramService.onCallback(this.handleCallback.bind(this));
    }
}

module.exports = new CallbackHandler();
