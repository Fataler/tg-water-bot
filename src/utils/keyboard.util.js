const config = require('../config/config');

class KeyboardUtil {
    static getMainKeyboard() {
        return {
            reply_markup: {
                keyboard: [
                    ['üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É'],
                    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
                ],
                resize_keyboard: true
            }
        };
    }

    static getDrinkTypeKeyboard(message_id) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üíß –í–æ–¥–∞', callback_data: `drink_water_${message_id}` },
                        { text: 'ü•§ –î—Ä—É–≥–æ–π –Ω–∞–ø–∏—Ç–æ–∫', callback_data: `drink_other_${message_id}` }
                    ]
                ]
            }
        };
    }

    static getAmountKeyboard(type, message_id) {
        const amounts = [
            [
                { amount: '0.2', text: '0.2–ª' },
                { amount: '0.3', text: '0.3–ª' },
                { amount: '0.5', text: '0.5–ª' }
            ],
            [
                { amount: '0.7', text: '0.7–ª' },
                { amount: '1.0', text: '1.0–ª' },
                { amount: 'custom', text: '–î—Ä—É–≥–æ–µ' }
            ]
        ];

        return {
            reply_markup: {
                inline_keyboard: amounts.map(row => 
                    row.map(item => ({
                        text: item.text,
                        callback_data: `${type}_${item.amount}_${message_id}`
                    }))
                )
            }
        };
    }

    static getWaterAmountKeyboard(message_id) {
        return this.getAmountKeyboard('water', message_id);
    }

    static getOtherDrinkAmountKeyboard(message_id) {
        return this.getAmountKeyboard('other', message_id);
    }

    static getStatsKeyboard(message_id) {
        const periods = [
            [
                { period: 'today', text: '–°–µ–≥–æ–¥–Ω—è' },
                { period: 'week', text: '–ù–µ–¥–µ–ª—è' }
            ],
            [
                { period: 'month', text: '–ú–µ—Å—è—Ü' },
                { period: 'all', text: '–í—Å—ë –≤—Ä–µ–º—è' }
            ]
        ];

        return {
            reply_markup: {
                inline_keyboard: periods.map(row =>
                    row.map(item => ({
                        text: item.text,
                        callback_data: `stats_${item.period}_${message_id}`
                    }))
                )
            }
        };
    }

    static getGoalKeyboard() {
        const goals = [
            [
                { goal: '1.5', text: '1.5–ª' },
                { goal: '2', text: '2–ª' },
                { goal: '2.5', text: '2.5–ª' }
            ],
            [
                { goal: '3', text: '3–ª' },
                { goal: 'custom', text: '–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' }
            ]
        ];

        return {
            reply_markup: {
                inline_keyboard: goals.map(row =>
                    row.map(item => ({
                        text: item.text,
                        callback_data: `goal_${item.goal}`
                    }))
                )
            }
        };
    }

    static getSettingsKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å', callback_data: 'settings_goal' },
                    ],
                    [
                        { text: 'üîî –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications_true' },
                        { text: 'üîï –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications_false' }
                    ]
                ]
            }
        };
    }

    static createTimeKeyboard() {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—É—Å—Ç—ã–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', callback_data: 'time_deprecated' }]
                ]
            }
        };
    }
}

module.exports = KeyboardUtil;
