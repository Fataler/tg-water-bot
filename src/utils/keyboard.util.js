const config = require('../config/config');

class KeyboardUtil {
    static getMainKeyboard() {
        return {
            reply_markup: {
                keyboard: [
                    ['üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É'],
                    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
                ],
                resize_keyboard: true
            }
        };
    }

    static getWaterAmountKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '0.25–ª', callback_data: 'water_0.25' },
                        { text: '0.5–ª', callback_data: 'water_0.5' },
                        { text: '0.75–ª', callback_data: 'water_0.75' }
                    ],
                    [
                        { text: '1–ª', callback_data: 'water_1' },
                        { text: '1.5–ª', callback_data: 'water_1.5' },
                        { text: '2–ª', callback_data: 'water_2' }
                    ],
                    [
                        { text: '–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'water_custom' }
                    ]
                ]
            }
        };
    }

    static getGoalKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '1.5–ª', callback_data: 'goal_1.5' },
                        { text: '2–ª', callback_data: 'goal_2' },
                        { text: '2.5–ª', callback_data: 'goal_2.5' }
                    ],
                    [
                        { text: '3–ª', callback_data: 'goal_3' },
                        { text: '–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', callback_data: 'goal_custom' }
                    ]
                ]
            }
        };
    }

    static getStatsKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ó–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'stats_today' },
                        { text: '–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'stats_week' }
                    ],
                    [
                        { text: '–ó–∞ –º–µ—Å—è—Ü', callback_data: 'stats_month' },
                        { text: '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è', callback_data: 'stats_all' }
                    ]
                ]
            }
        };
    }

    static createSettingsKeyboard(user) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å', callback_data: 'settings_goal' }],
                    [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'settings_time' }],
                    [{ 
                        text: user.do_not_disturb ? '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                        callback_data: `settings_notifications_${!user.do_not_disturb}`
                    }]
                ]
            }
        };
    }

    static createTimeKeyboard() {
        const keyboard = [];
        let row = [];
        
        for(let i = 0; i < 24; i++) {
            const hour = i.toString().padStart(2, '0');
            row.push({
                text: `${hour}:00`,
                callback_data: `time_${hour}:00`
            });
            
            if(row.length === 3 || i === 23) {
                keyboard.push([...row]);
                row = [];
            }
        }
        
        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }
}

module.exports = KeyboardUtil;
