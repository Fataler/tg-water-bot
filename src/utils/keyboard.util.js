const config = require('../config/config');

class KeyboardUtil {
    static getMainKeyboard() {
        return {
            reply_markup: {
                keyboard: [
                    ['üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É'],
                    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
                ],
                resize_keyboard: true
            }
        };
    }

    static getDrinkTypeKeyboard(message_id) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üíß –í–æ–¥–∞', callback_data: `drink_water_${message_id}` },
                        { text: 'ü•§ –î—Ä—É–≥–æ–π –Ω–∞–ø–∏—Ç–æ–∫', callback_data: `drink_other_${message_id}` }
                    ]
                ]
            }
        };
    }

    static getWaterAmountKeyboard(message_id) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '0.2–ª', callback_data: `water_0.2_${message_id}` },
                        { text: '0.3–ª', callback_data: `water_0.3_${message_id}` },
                        { text: '0.5–ª', callback_data: `water_0.5_${message_id}` }
                    ],
                    [
                        { text: '0.7–ª', callback_data: `water_0.7_${message_id}` },
                        { text: '1.0–ª', callback_data: `water_1.0_${message_id}` },
                        { text: '–î—Ä—É–≥–æ–µ', callback_data: `water_custom_${message_id}` }
                    ]
                ]
            }
        };
    }

    static getOtherDrinkAmountKeyboard(message_id) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '0.2–ª', callback_data: `other_0.2_${message_id}` },
                        { text: '0.3–ª', callback_data: `other_0.3_${message_id}` },
                        { text: '0.5–ª', callback_data: `other_0.5_${message_id}` }
                    ],
                    [
                        { text: '0.7–ª', callback_data: `other_0.7_${message_id}` },
                        { text: '1.0–ª', callback_data: `other_1.0_${message_id}` },
                        { text: '–î—Ä—É–≥–æ–µ', callback_data: `other_custom_${message_id}` }
                    ]
                ]
            }
        };
    }

    static getGoalKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '1.5–ª', callback_data: 'goal_1.5' },
                        { text: '2–ª', callback_data: 'goal_2' },
                        { text: '2.5–ª', callback_data: 'goal_2.5' }
                    ],
                    [
                        { text: '3–ª', callback_data: 'goal_3' },
                        { text: '–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', callback_data: 'goal_custom' }
                    ]
                ]
            }
        };
    }

    static getStatsKeyboard(message_id) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–°–µ–≥–æ–¥–Ω—è', callback_data: `stats_today_${message_id}` },
                        { text: '–ù–µ–¥–µ–ª—è', callback_data: `stats_week_${message_id}` }
                    ],
                    [
                        { text: '–ú–µ—Å—è—Ü', callback_data: `stats_month_${message_id}` },
                        { text: '–í—Å—ë –≤—Ä–µ–º—è', callback_data: `stats_all_${message_id}` }
                    ]
                ]
            }
        };
    }

    static getSettingsKeyboard(user, message_id) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å', callback_data: `settings_goal_${message_id}` },
                        { text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data: `settings_time_${message_id}` }
                    ],
                    [
                        {
                            text: user.do_not_disturb ? 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                            callback_data: `settings_notifications_${!user.do_not_disturb}_${message_id}`
                        }
                    ]
                ]
            }
        };
    }

    static createTimeKeyboard() {
        const keyboard = [];
        let row = [];
        
        for(let i = 0; i < 24; i++) {
            const hour = i.toString().padStart(2, '0');
            row.push({
                text: `${hour}:00`,
                callback_data: `time_${hour}:00`
            });
            
            if(row.length === 3 || i === 23) {
                keyboard.push([...row]);
                row = [];
            }
        }
        
        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }
}

module.exports = KeyboardUtil;
