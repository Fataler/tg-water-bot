const logger = require('../config/logger.config');
const ValidationUtil = require('./validation.util');
const config = require('../config/config');

class MessageUtil {
    static formatWaterAddedMessage(amount, dailyIntake) {
        return (
            `üéØ –û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ ${ValidationUtil.formatWaterAmount(amount)}!\n\n` +
            `üíß –í–æ–¥–∞: ${ValidationUtil.formatWaterAmount(dailyIntake.water)}\n` +
            `ü•§ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: ${ValidationUtil.formatWaterAmount(dailyIntake.other)}\n` +
            `üìä –í—Å–µ–≥–æ: ${ValidationUtil.formatWaterAmount(dailyIntake.total)}\n\n` +
            `${dailyIntake.total >= dailyIntake.goal ? 'üéâ –¢—ã –¥–æ—Å—Ç–∏–≥(–ª–∞) –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™' : 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}`
        );
    }

    static formatDailyStats(amount, options = { showEmoji: true }) {
        const percent = Math.round((amount / 2.5) * 100);
        const emoji = options.showEmoji ? 'üíß ' : '';
        return `${emoji}–°–µ–≥–æ–¥–Ω—è: ${amount}–ª –∏–∑ 2.5–ª (${percent}%)`;
    }

    static formatAllTimeStats(stats) {
        return (
            `üìÖ –î–Ω–µ–π –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${stats.days}\n` +
            `üíß –û–±—â–∏–π –æ–±—ä–µ–º: ${ValidationUtil.formatWaterAmount(stats.total)}\n` +
            `üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${stats.average.toFixed(2)}\n` +
            `üèÜ –ú–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å: ${ValidationUtil.formatWaterAmount(stats.max)} (${stats.maxDate})\n`
        );
    }

    static formatPeriodStats(stats) {
        if (!Array.isArray(stats)) {
            return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
        }

        if (stats.length === 0) {
            return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
        }

        let message = '';
        stats.forEach((day) => {
            const date = new Date(day.date);
            const formattedDate = date.toLocaleDateString('ru-RU', {
                weekday: 'short',
                month: 'short',
                day: 'numeric',
            });
            message += `${formattedDate}:\n`;
            message += `üíß –í–æ–¥–∞: ${ValidationUtil.formatWaterAmount(day.water)}\n`;
            message += `ü•§ –î—Ä—É–≥–∏–µ: ${ValidationUtil.formatWaterAmount(day.other)}\n`;
            message += `üìä –í—Å–µ–≥–æ: ${ValidationUtil.formatWaterAmount(day.total)}\n\n`;
        });
        return message || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
    }

    static getProgressBar(percentage) {
        const filledCount = Math.floor(percentage / 10);
        const emptyCount = 10 - filledCount;
        return 'üü¶'.repeat(filledCount) + '‚¨úÔ∏è'.repeat(emptyCount);
    }

    static formatGoalSetMessage() {
        const { morning, day, evening } = config.notifications.periods;

        return (
            'üéâ –û—Ç–ª–∏—á–Ω–æ! –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n' +
            'ü§ñ –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è:\n' +
            `üåÖ –£—Ç—Ä–æ–º (${morning.targetPercent}% –æ—Ç —Ü–µ–ª–∏)\n` +
            `‚òÄÔ∏è –î–Ω—ë–º (${day.targetPercent}% –æ—Ç —Ü–µ–ª–∏)\n` +
            `üåÜ –í–µ—á–µ—Ä–æ–º (${evening.targetPercent}% –æ—Ç —Ü–µ–ª–∏)\n\n` +
            'üí™ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º! üíß'
        );
    }

    static formatStats(messageType, stats, period) {
        try {
            if (!stats || !messageType) {
                return null;
            }

            const { water, other, total } = stats;

            return messageType
                .replace('{water}', water * 1000)
                .replace('{other}', other * 1000)
                .replace('{total}', total * 1000)
                .replace('{period}', period || '');
        } catch (error) {
            logger.error('Error formatting stats message:', error);
            return null;
        }
    }
}

module.exports = MessageUtil;
